{"version":3,"sources":["../../src/rules/checkExamples.js"],"names":["zeroBasedLineIndexAdjust","likelyNestedJSDocIndentSpace","preTagSpaceLength","hasCaptionRegex","escapeStringRegexp","str","replace","countChars","ch","match","RegExp","length","jsdoc","report","utils","exampleCodeRegex","getExampleCodeRegex","rejectExampleCodeRegex","getRejectExampleCodeRegex","noDefaultExampleRules","hasNoDefaultExampleRules","eslintrcForExamples","useEslintrcForExamples","filename","getMatchingFileName","baseConfig","getBaseConfig","configFile","getConfigFile","allowInlineConfig","reportUnusedDisableDirectives","rulePaths","rules","undefined","_","forEach","tags","tag","initialTag","source","initialTagLength","firstLinePrefixLength","slice","isCaptionRequired","test","nonJSPrefacingLines","nonJSPrefacingCols","idx","search","preMatchLines","preMatch","colDelta","lastIndexOf","n0","n1","index","indexOf","nonJSPreface","nonJSPrefaceLineCount","charsInLastLine","cli","CLIEngine","useEslintrc","messages","config","getConfigForFile","linter","Linter","linterRules","getRules","entries","reduce","obj","key","val","defineRules","verify","executeOnText","results","codeStartLine","line","codeStartCol","message","column","severity","ruleId","startLine","startCol"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,wBAAwB,GAAG,CAAC,CAAlC;AACA,IAAMC,4BAA4B,GAAG,CAArC;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA,IAAMC,eAAe,GAAG,6BAAxB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAAS;AAClC,SAAOA,GAAG,CAACC,OAAJ,CAAY,qBAAZ,EAAmC,MAAnC,CAAP;AACD,CAFD;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACF,GAAD,EAAMG,EAAN,EAAa;AAC9B,SAAO,CAACH,GAAG,CAACI,KAAJ,CAAU,IAAIC,MAAJ,CAAWN,kBAAkB,CAACI,EAAD,CAA7B,EAAmC,GAAnC,CAAV,KAAsD,EAAvD,EAA2DG,MAAlE;AACD,CAFD;;eAIe,2BAAa,gBAItB;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,MADJC,KACI,QADJA,KACI;AACJ,MAAIC,gBAAgB,GAAGD,KAAK,CAACE,mBAAN,EAAvB;AACA,MAAIC,sBAAsB,GAAGH,KAAK,CAACI,yBAAN,EAA7B;AACA,MAAMC,qBAAqB,GAAGL,KAAK,CAACM,wBAAN,EAA9B;AACA,MAAMC,mBAAmB,GAAGP,KAAK,CAACQ,sBAAN,EAA5B;AACA,MAAMC,QAAQ,GAAGT,KAAK,CAACU,mBAAN,EAAjB;AACA,MAAMC,UAAU,GAAGX,KAAK,CAACY,aAAN,EAAnB;AACA,MAAMC,UAAU,GAAGb,KAAK,CAACc,aAAN,EAAnB;AACA,MAAMC,iBAAiB,GAAGf,KAAK,CAACe,iBAAN,EAA1B;AACA,MAAMC,6BAA6B,GAAGhB,KAAK,CAACgB,6BAAN,EAAtC,CATI,CAWJ;;AACA,MAAMC,SAAS,GAAG,EAAlB;AAEA,MAAMC,KAAK,GAAGb,qBAAqB,GAAGc,SAAH,GAAe;AAChD;AACA,gBAAY,CAFoC;AAIhD;AACA,4BAAwB,CALwB;AAOhD;AACA,0BAAsB,CAR0B;AAUhD;AACA,kBAAc,CAXkC;AAahD;AACA,gBAAY,CAdoC;AAgBhD;AACA,sBAAkB,CAjB8B;AAmBhD;AACA,8BAA0B,CApBsB;AAqBhD,+BAA2B,CArBqB;AAuBhD;AACA,qBAAiB;AAxB+B,GAAlD;AA2BAlB,EAAAA,gBAAgB,GAAGA,gBAAgB,IAAI,IAAIL,MAAJ,CAAWK,gBAAX,EAA6B,EAA7B,CAAvC;AACAE,EAAAA,sBAAsB,GAAGA,sBAAsB,IAAI,IAAIP,MAAJ,CAAWO,sBAAX,EAAmC,EAAnC,CAAnD;;AAEAiB,kBAAEC,OAAF,CAAUvB,KAAK,CAACwB,IAAhB,EAAsB,UAACC,GAAD,EAAS;AAC7B,QAAIA,GAAG,CAACA,GAAJ,KAAY,SAAhB,EAA2B;AACzB;AACD,KAH4B,CAK7B;;;AACA,QAAMC,UAAU,GAAGD,GAAG,CAACE,MAAJ,CAAW9B,KAAX,CAAiB,aAAjB,CAAnB;AACA,QAAM+B,gBAAgB,GAAGF,UAAU,CAAC,CAAD,CAAV,CAAc3B,MAAvC;AACA,QAAM8B,qBAAqB,GAAGvC,iBAAiB,GAAGsC,gBAAlD;AAEA,QAAID,MAAM,GAAGF,GAAG,CAACE,MAAJ,CAAWG,KAAX,CAAiBF,gBAAjB,CAAb;AACA,QAAM/B,KAAK,GAAG8B,MAAM,CAAC9B,KAAP,CAAaN,eAAb,CAAd;;AAEA,QAAIW,KAAK,CAAC6B,iBAAN,MAA6B,CAAClC,KAAlC,EAAyC;AACvCI,MAAAA,MAAM,CAAC,mCAAD,EAAsC,IAAtC,EAA4CwB,GAA5C,CAAN;AACD,KAf4B,CAiB7B;;;AACAE,IAAAA,MAAM,GAAGA,MAAM,CAACjC,OAAP,CAAeH,eAAf,EAAgC,EAAhC,CAAT;;AAEA,QAAIY,gBAAgB,IAAI,CAACA,gBAAgB,CAAC6B,IAAjB,CAAsBL,MAAtB,CAArB,IACFtB,sBAAsB,IAAIA,sBAAsB,CAAC2B,IAAvB,CAA4BL,MAA5B,CAD5B,EAEE;AACA;AACD;;AAED,QAAIM,mBAAmB,GAAG,CAA1B;AACA,QAAIC,kBAAkB,GAAG,CAAzB;;AAEA,QAAI/B,gBAAJ,EAAsB;AACpB,UAAMgC,GAAG,GAAGR,MAAM,CAACS,MAAP,CAAcjC,gBAAd,CAAZ,CADoB,CAGpB;;AACA,UAAIkC,aAAa,GAAG,CAApB;AAEA,UAAMC,QAAQ,GAAGX,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBK,GAAhB,CAAjB;AAEAE,MAAAA,aAAa,GAAG1C,UAAU,CAAC2C,QAAD,EAAW,IAAX,CAA1B;AAEAL,MAAAA,mBAAmB,GAAGI,aAAtB;AAEA,UAAME,QAAQ,GAAGF,aAAa,GAC5BC,QAAQ,CAACR,KAAT,CAAeQ,QAAQ,CAACE,WAAT,CAAqB,IAArB,IAA6B,CAA5C,EAA+CzC,MAA/C,GAAwD6B,gBAD5B,GAE5BU,QAAQ,CAACvC,MAFX,CAZoB,CAgBpB;AACA;;AACA4B,MAAAA,MAAM,GAAGA,MAAM,CAACG,KAAP,CAAaK,GAAb,CAAT;AAEAR,MAAAA,MAAM,GAAGA,MAAM,CAACjC,OAAP,CAAeS,gBAAf,EAAiC,UAACsC,EAAD,EAAKC,EAAL,EAAY;AACpD,YAAI,CAACA,EAAL,EAAS;AACP,iBAAOD,EAAP;AACD;;AAED,YAAME,KAAK,GAAGF,EAAE,CAACG,OAAH,CAAWF,EAAX,CAAd;AACA,YAAMG,YAAY,GAAGJ,EAAE,CAACX,KAAH,CAAS,CAAT,EAAYa,KAAZ,CAArB;AACA,YAAMG,qBAAqB,GAAGnD,UAAU,CAACkD,YAAD,EAAe,IAAf,CAAxC;AAEAZ,QAAAA,mBAAmB,IAAIa,qBAAvB,CAToD,CAWpD;;AACA,YAAIA,qBAAJ,EAA2B;AACzB,cAAMC,eAAe,GAAGF,YAAY,CAACf,KAAb,CAAmBe,YAAY,CAACL,WAAb,CAAyB,IAAzB,IAAiC,CAApD,EAAuDzC,MAA/E;AAEAmC,UAAAA,kBAAkB,IAAIa,eAAe,GAAGnB,gBAAxC;AACD,SAJD,MAIO;AACLM,UAAAA,kBAAkB,IAAIK,QAAQ,GAAGM,YAAY,CAAC9C,MAA9C;AACD;;AAED,eAAO2C,EAAP;AACD,OArBQ,CAAT;AAsBD,KAvE4B,CAyE7B;;;AACA,QAAMM,GAAG,GAAG,IAAIC,iBAAJ,CAAc;AACxBhC,MAAAA,iBADwB;AAExBJ,MAAAA,UAFwB;AAGxBE,MAAAA,UAHwB;AAIxBG,MAAAA,6BAJwB;AAKxBC,MAAAA,SALwB;AAMxBC,MAAAA,KANwB;AAOxB8B,MAAAA,WAAW,EAAEzC;AAPW,KAAd,CAAZ;AAUA,QAAI0C,QAAJ;;AAEA,QAAIxC,QAAJ,EAAc;AACZ,UAAMyC,MAAM,GAAGJ,GAAG,CAACK,gBAAJ,CAAqB1C,QAArB,CAAf;AACA,UAAM2C,MAAM,GAAG,IAAIC,cAAJ,EAAf;;AAEA,UAAMC,WAAW,GAAG,mBAAIR,GAAG,CAACS,QAAJ,GAAeC,OAAf,EAAJ,EAA8BC,MAA9B,CAAqC,UAACC,GAAD,SAAqB;AAAA;AAAA,YAAdC,GAAc;AAAA,YAATC,GAAS;;AAC5EF,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,GAAX;AAEA,eAAOF,GAAP;AACD,OAJmB,EAIjB,EAJiB,CAApB;;AAMAN,MAAAA,MAAM,CAACS,WAAP,CAAmBP,WAAnB;AAEAL,MAAAA,QAAQ,GAAGG,MAAM,CAACU,MAAP,CAAcrC,MAAd,EAAsByB,MAAtB,EAA8B;AACvCzC,QAAAA,QADuC;AAEvCO,QAAAA;AAFuC,OAA9B,CAAX;AAID,KAhBD,MAgBO;AAAA,+BAEH8B,GAAG,CAACiB,aAAJ,CAAkBtC,MAAlB,CAFG;;AAAA,oEACHuC,OADG;;AACQf,MAAAA,QADR,4BACQA,QADR;AAGN,KAzG4B,CA2G7B;;;AACA,QAAMgB,aAAa,GAAG1C,GAAG,CAAC2C,IAAJ,GAAWnC,mBAAjC;AACA,QAAMoC,YAAY,GAAGhF,4BAArB;AAEA8D,IAAAA,QAAQ,CAAC5B,OAAT,CAAiB,iBAA+C;AAAA,UAA7C+C,OAA6C,SAA7CA,OAA6C;AAAA,UAApCF,IAAoC,SAApCA,IAAoC;AAAA,UAA9BG,MAA8B,SAA9BA,MAA8B;AAAA,UAAtBC,QAAsB,SAAtBA,QAAsB;AAAA,UAAZC,MAAY,SAAZA,MAAY;AAC9D,UAAMC,SAAS,GAAGP,aAAa,GAAGC,IAAhB,GAAuBhF,wBAAzC;AACA,UAAMuF,QAAQ,GAAGN,YAAY,KAE3B;AACAD,MAAAA,IAAI,IAAI,CAAR,GAAYlC,kBAAkB,GAAGL,qBAAjC,GAAyDvC,iBAH9B,CAAZ,GAIbiF,MAJJ,CAF8D,CAQ9D;;AACAtE,MAAAA,MAAM,CACJ,eAAeuE,QAAQ,KAAK,CAAb,GAAiB,OAAjB,GAA2B,SAA1C,KACGC,MAAM,GAAG,OAAOA,MAAP,GAAgB,GAAnB,GAAyB,EADlC,IACwC,IADxC,GAEEH,OAHE,EAIJ,IAJI,EAKJ;AACEC,QAAAA,MAAM,EAAEI,QADV;AAEEP,QAAAA,IAAI,EAAEM;AAFR,OALI,CAAN;AAUD,KAnBD;AAoBD,GAnID;AAoID,CApLc,C","sourcesContent":["import _ from 'lodash';\nimport {CLIEngine, Linter} from 'eslint';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\nconst hasCaptionRegex = /^\\s*<caption>.*?<\\/caption>/;\n\nconst escapeStringRegexp = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'g')) || []).length;\n};\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils\n}) => {\n  let exampleCodeRegex = utils.getExampleCodeRegex();\n  let rejectExampleCodeRegex = utils.getRejectExampleCodeRegex();\n  const noDefaultExampleRules = utils.hasNoDefaultExampleRules();\n  const eslintrcForExamples = utils.useEslintrcForExamples();\n  const filename = utils.getMatchingFileName();\n  const baseConfig = utils.getBaseConfig();\n  const configFile = utils.getConfigFile();\n  const allowInlineConfig = utils.allowInlineConfig();\n  const reportUnusedDisableDirectives = utils.reportUnusedDisableDirectives();\n\n  // Make this configurable?\n  const rulePaths = [];\n\n  const rules = noDefaultExampleRules ? undefined : {\n    // \"always\" newline rule at end unlikely in sample code\n    'eol-last': 0,\n\n    // Wouldn't generally expect example paths to resolve relative to JS file\n    'import/no-unresolved': 0,\n\n    // Snippets likely too short to always include import/export info\n    'import/unambiguous': 0,\n\n    // Unlikely to have inadvertent debugging within examples\n    'no-console': 0,\n\n    // Many variables in examples will be `undefined`\n    'no-undef': 0,\n\n    // Common to define variables for clarity without always using them\n    'no-unused-vars': 0,\n\n    // See import/no-unresolved\n    'node/no-missing-import': 0,\n    'node/no-missing-require': 0,\n\n    // Can generally look nicer to pad a little even if code imposes more stringency\n    'padded-blocks': 0\n  };\n\n  exampleCodeRegex = exampleCodeRegex && new RegExp(exampleCodeRegex, '');\n  rejectExampleCodeRegex = rejectExampleCodeRegex && new RegExp(rejectExampleCodeRegex, '');\n\n  _.forEach(jsdoc.tags, (tag) => {\n    if (tag.tag !== 'example') {\n      return;\n    }\n\n    // If a space is present, we should ignore it\n    const initialTag = tag.source.match(/^@example ?/);\n    const initialTagLength = initialTag[0].length;\n    const firstLinePrefixLength = preTagSpaceLength + initialTagLength;\n\n    let source = tag.source.slice(initialTagLength);\n    const match = source.match(hasCaptionRegex);\n\n    if (utils.isCaptionRequired() && !match) {\n      report('Caption is expected for examples.', null, tag);\n    }\n\n    // If we allow newlines in hasCaptionRegex, we should add to line count\n    source = source.replace(hasCaptionRegex, '');\n\n    if (exampleCodeRegex && !exampleCodeRegex.test(source) ||\n      rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)\n    ) {\n      return;\n    }\n\n    let nonJSPrefacingLines = 0;\n    let nonJSPrefacingCols = 0;\n\n    if (exampleCodeRegex) {\n      const idx = source.search(exampleCodeRegex);\n\n      // Strip out anything preceding user regex match (can affect line numbering)\n      let preMatchLines = 0;\n\n      const preMatch = source.slice(0, idx);\n\n      preMatchLines = countChars(preMatch, '\\n');\n\n      nonJSPrefacingLines = preMatchLines;\n\n      const colDelta = preMatchLines ?\n        preMatch.slice(preMatch.lastIndexOf('\\n') + 1).length - initialTagLength :\n        preMatch.length;\n\n      // Get rid of text preceding user regex match (even if it leaves valid JS, it\n      //   could cause us to count newlines twice)\n      source = source.slice(idx);\n\n      source = source.replace(exampleCodeRegex, (n0, n1) => {\n        if (!n1) {\n          return n0;\n        }\n\n        const index = n0.indexOf(n1);\n        const nonJSPreface = n0.slice(0, index);\n        const nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n\n        nonJSPrefacingLines += nonJSPrefaceLineCount;\n\n        // Ignore `preMatch` delta if newlines here\n        if (nonJSPrefaceLineCount) {\n          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n          nonJSPrefacingCols += charsInLastLine - initialTagLength;\n        } else {\n          nonJSPrefacingCols += colDelta + nonJSPreface.length;\n        }\n\n        return n1;\n      });\n    }\n\n    // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n    const cli = new CLIEngine({\n      allowInlineConfig,\n      baseConfig,\n      configFile,\n      reportUnusedDisableDirectives,\n      rulePaths,\n      rules,\n      useEslintrc: eslintrcForExamples\n    });\n\n    let messages;\n\n    if (filename) {\n      const config = cli.getConfigForFile(filename);\n      const linter = new Linter();\n\n      const linterRules = [...cli.getRules().entries()].reduce((obj, [key, val]) => {\n        obj[key] = val;\n\n        return obj;\n      }, {});\n\n      linter.defineRules(linterRules);\n\n      messages = linter.verify(source, config, {\n        filename,\n        reportUnusedDisableDirectives\n      });\n    } else {\n      ({results: [{messages}]} =\n        cli.executeOnText(source));\n    }\n\n    // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n    const codeStartLine = tag.line + nonJSPrefacingLines;\n    const codeStartCol = likelyNestedJSDocIndentSpace;\n\n    messages.forEach(({message, line, column, severity, ruleId}) => {\n      const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;\n      const startCol = codeStartCol + (\n\n        // This might not work for line 0, but line 0 is unlikely for examples\n        line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n      ) + column;\n\n      // Could perhaps make fixable\n      report(\n        '@example ' + (severity === 2 ? 'error' : 'warning') +\n          (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n          message,\n        null,\n        {\n          column: startCol,\n          line: startLine\n        }\n      );\n    });\n  });\n});\n"],"file":"checkExamples.js"}