{"version":3,"sources":["../../src/rules/validTypes.js"],"names":["isLink","tag","test","asExpression","jsdoc","report","utils","_","forEach","tags","validTypeParsing","type","error","name","thisNamepath","description","replace","thatNamepath","isNamepathType","passesEmptyNamepathCheck"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAS;AACtB,SAAO,2CAA2CC,IAA3C,CAAgDD,GAAhD,CAAP;AACD,CAFD;;AAIA,IAAME,YAAY,GAAG,OAArB;;eAEe,2BAAa,gBAItB;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,MADJC,KACI,QADJA,KACI;;AACJC,kBAAEC,OAAF,CAAUJ,KAAK,CAACK,IAAhB,EAAsB,UAACR,GAAD,EAAS;AAC7B,QAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,IAAV,EAAgB;AACvC,UAAI;AACF,oCAAMA,IAAN;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,aAAnB,EAAkC;AAChCR,UAAAA,MAAM,CAAC,2BAA2BM,IAA5B,EAAkC,IAAlC,EAAwCV,GAAxC,CAAN;AAEA,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD,KAZD;;AAcA,QAAIA,GAAG,CAACA,GAAJ,KAAY,SAAhB,EAA2B;AACzB,UAAMa,YAAY,GAAGb,GAAG,CAACc,WAAJ,CAAgBC,OAAhB,CAAwBb,YAAxB,EAAsC,EAAtC,CAArB;;AAEA,UAAI,CAACA,YAAY,CAACD,IAAb,CAAkBD,GAAG,CAACc,WAAtB,CAAD,IAAuC,CAACD,YAA5C,EAA0D;AACxDT,QAAAA,MAAM,CAAC,mDAAmDJ,GAAG,CAACc,WAAvD,GAAqE,GAAtE,EAA2E,IAA3E,EAAiFd,GAAjF,CAAN;AAEA;AACD;;AAED,UAAIS,gBAAgB,CAACI,YAAD,CAApB,EAAoC;AAClC,YAAMG,YAAY,GAAGhB,GAAG,CAACY,IAAzB;AAEAH,QAAAA,gBAAgB,CAACO,YAAD,CAAhB;AACD;AACF,KAdD,MAcO,IAAIX,KAAK,CAACY,cAAN,CAAqBjB,GAAG,CAACA,GAAzB,CAAJ,EAAmC;AACxC,UAAIK,KAAK,CAACa,wBAAN,CAA+BlB,GAA/B,CAAJ,EAAyC;AACvC;AACD;;AACDS,MAAAA,gBAAgB,CAACT,GAAG,CAACY,IAAL,CAAhB;AACD,KALM,MAKA,IAAIZ,GAAG,CAACU,IAAJ,IAAY,CAACX,MAAM,CAACC,GAAG,CAACU,IAAL,CAAvB,EAAmC;AACxCD,MAAAA,gBAAgB,CAACT,GAAG,CAACU,IAAL,CAAhB;AACD;AACF,GArCD;AAsCD,CA3Cc,C","sourcesContent":["import _ from 'lodash';\nimport {parse} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\n/** @param {string} tag */\nconst isLink = (tag) => {\n  return /^(@link|@linkcode|@linkplain|@tutorial) /.test(tag);\n};\n\nconst asExpression = /as\\s+/;\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils\n}) => {\n  _.forEach(jsdoc.tags, (tag) => {\n    const validTypeParsing = function (type) {\n      try {\n        parse(type);\n      } catch (error) {\n        if (error.name === 'SyntaxError') {\n          report('Syntax error in type: ' + type, null, tag);\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    if (tag.tag === 'borrows') {\n      const thisNamepath = tag.description.replace(asExpression, '');\n\n      if (!asExpression.test(tag.description) || !thisNamepath) {\n        report('@borrows must have an \"as\" expression. Found \"' + tag.description + '\"', null, tag);\n\n        return;\n      }\n\n      if (validTypeParsing(thisNamepath)) {\n        const thatNamepath = tag.name;\n\n        validTypeParsing(thatNamepath);\n      }\n    } else if (utils.isNamepathType(tag.tag)) {\n      if (utils.passesEmptyNamepathCheck(tag)) {\n        return;\n      }\n      validTypeParsing(tag.name);\n    } else if (tag.type && !isLink(tag.type)) {\n      validTypeParsing(tag.type);\n    }\n  });\n});\n"],"file":"validTypes.js"}