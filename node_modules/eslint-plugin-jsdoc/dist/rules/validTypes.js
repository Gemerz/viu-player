"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _jsdoctypeparser = require("jsdoctypeparser");

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @param {string} tag */
var isLink = function isLink(tag) {
  return /^(@link|@linkcode|@linkplain|@tutorial) /.test(tag);
};

var asExpression = /as\s+/;

var _default = (0, _iterateJsdoc.default)(function (_ref) {
  var jsdoc = _ref.jsdoc,
      report = _ref.report,
      utils = _ref.utils;

  _lodash.default.forEach(jsdoc.tags, function (tag) {
    var validTypeParsing = function validTypeParsing(type) {
      try {
        (0, _jsdoctypeparser.parse)(type);
      } catch (error) {
        if (error.name === 'SyntaxError') {
          report('Syntax error in type: ' + type, null, tag);
          return false;
        }
      }

      return true;
    };

    if (tag.tag === 'borrows') {
      var thisNamepath = tag.description.replace(asExpression, '');

      if (!asExpression.test(tag.description) || !thisNamepath) {
        report('@borrows must have an "as" expression. Found "' + tag.description + '"', null, tag);
        return;
      }

      if (validTypeParsing(thisNamepath)) {
        var thatNamepath = tag.name;
        validTypeParsing(thatNamepath);
      }
    } else if (utils.isNamepathType(tag.tag)) {
      if (utils.passesEmptyNamepathCheck(tag)) {
        return;
      }

      validTypeParsing(tag.name);
    } else if (tag.type && !isLink(tag.type)) {
      validTypeParsing(tag.type);
    }
  });
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=validTypes.js.map