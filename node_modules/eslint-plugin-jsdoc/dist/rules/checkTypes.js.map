{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["targetTags","targetTagAliases","concat","strictNativeTypes","jsdoc","jsdocNode","sourceCode","report","jsdocTags","_","filter","tags","tag","includes","forEach","jsdocTag","invalidTypes","typeAst","type","error","node","strictNativeType","toLowerCase","name","push","fixedType","invalidType","fix","fixer","replaceText","getText","replace"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAIA,UAAU,GAAG,CACf,OADe,EAEf,UAFe,EAGf,MAHe,EAIf,QAJe,EAKf,QALe,EAMf,WANe,EAOf,OAPe,EAQf,UARe,EASf,SATe,EAUf,QAVe,EAWf,MAXe,EAYf,SAZe,CAAjB;AAeA,IAAMC,gBAAgB,GAAG,CACvB,aADuB,EAEvB,OAFuB,EAGvB,KAHuB,EAIvB,KAJuB,EAKvB,UALuB,EAMvB,MANuB,EAOvB,QAPuB,EAQvB,WARuB,CAAzB;AAWAD,UAAU,GAAGA,UAAU,CAACE,MAAX,CAAkBD,gBAAlB,CAAb;AAEA,IAAME,iBAAiB,GAAG,CACxB,WADwB,EAExB,MAFwB,EAGxB,SAHwB,EAIxB,QAJwB,EAKxB,QALwB,EAMxB,OANwB,EAOxB,QAPwB,EAQxB,QARwB,EASxB,MATwB,EAUxB,UAVwB,CAA1B;;eAae,2BAAa,gBAKtB;AAAA,MAJJC,KAII,QAJJA,KAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,MACI,QADJA,MACI;;AACJ,MAAMC,SAAS,GAAGC,gBAAEC,MAAF,CAASN,KAAK,CAACO,IAAf,EAAqB,UAACC,GAAD,EAAS;AAC9C,WAAOH,gBAAEI,QAAF,CAAWb,UAAX,EAAuBY,GAAG,CAACA,GAA3B,CAAP;AACD,GAFiB,CAAlB;;AAIAH,kBAAEK,OAAF,CAAUN,SAAV,EAAqB,UAACO,QAAD,EAAc;AACjC,QAAMC,YAAY,GAAG,EAArB;AACA,QAAIC,OAAJ;;AAEA,QAAI;AACFA,MAAAA,OAAO,GAAG,4BAAMF,QAAQ,CAACG,IAAf,CAAV;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACD;;AAED,mCAASF,OAAT,EAAkB,UAACG,IAAD,EAAU;AAC1B,UAAIA,IAAI,CAACF,IAAL,KAAc,MAAlB,EAA0B;AACxB,8CAA+Bf,iBAA/B,wCAAkD;AAA7C,cAAMkB,gBAAgB,yBAAtB;;AACH,cAAIA,gBAAgB,CAACC,WAAjB,OAAmCF,IAAI,CAACG,IAAL,CAAUD,WAAV,EAAnC,IAA8DD,gBAAgB,KAAKD,IAAI,CAACG,IAA5F,EAAkG;AAChGP,YAAAA,YAAY,CAACQ,IAAb,CAAkBJ,IAAI,CAACG,IAAvB;AACAH,YAAAA,IAAI,CAACG,IAAL,GAAYF,gBAAZ;AACD;AACF;AACF;AACF,KATD;;AAWA,QAAIL,YAAJ,EAAkB;AAChB,UAAMS,SAAS,GAAG,8BAAQR,OAAR,CAAlB;;AAEAR,sBAAEK,OAAF,CAAUE,YAAV,EAAwB,UAACU,WAAD,EAAiB;AACvC,YAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACrB,iBAAOA,KAAK,CAACC,WAAN,CAAkBxB,SAAlB,EAA6BC,UAAU,CAACwB,OAAX,CAAmBzB,SAAnB,EAA8B0B,OAA9B,CAAsC,MAAMhB,QAAQ,CAACG,IAAf,GAAsB,GAA5D,EAAiE,MAAMO,SAAN,GAAkB,GAAnF,CAA7B,CAAP;AACD,SAFD;;AAIA,YAAMF,IAAI,GAAGR,QAAQ,CAACQ,IAAT,GAAgB,OAAOR,QAAQ,CAACQ,IAAhB,GAAuB,GAAvC,GAA6C,EAA1D;AAEAhB,QAAAA,MAAM,CAAC,oBAAoBQ,QAAQ,CAACH,GAA7B,GAAmCW,IAAnC,GAA0C,SAA1C,GAAsDG,WAAtD,GAAoE,IAArE,EAA2EC,GAA3E,EAAgFZ,QAAhF,CAAN;AACD,OARD;AASD;AACF,GAlCD;AAmCD,CA7Cc,C","sourcesContent":["import _ from 'lodash';\nimport {parse, traverse, publish} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nlet targetTags = [\n  'class',\n  'constant',\n  'enum',\n  'member',\n  'module',\n  'namespace',\n  'param',\n  'property',\n  'returns',\n  'throws',\n  'type',\n  'typedef'\n];\n\nconst targetTagAliases = [\n  'constructor',\n  'const',\n  'var',\n  'arg',\n  'argument',\n  'prop',\n  'return',\n  'exception'\n];\n\ntargetTags = targetTags.concat(targetTagAliases);\n\nconst strictNativeTypes = [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'string',\n  'Array',\n  'Object',\n  'RegExp',\n  'Date',\n  'Function'\n];\n\nexport default iterateJsdoc(({\n  jsdoc,\n  jsdocNode,\n  sourceCode,\n  report\n}) => {\n  const jsdocTags = _.filter(jsdoc.tags, (tag) => {\n    return _.includes(targetTags, tag.tag);\n  });\n\n  _.forEach(jsdocTags, (jsdocTag) => {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = parse(jsdocTag.type);\n    } catch (error) {\n      return;\n    }\n\n    traverse(typeAst, (node) => {\n      if (node.type === 'NAME') {\n        for (const strictNativeType of strictNativeTypes) {\n          if (strictNativeType.toLowerCase() === node.name.toLowerCase() && strictNativeType !== node.name) {\n            invalidTypes.push(node.name);\n            node.name = strictNativeType;\n          }\n        }\n      }\n    });\n\n    if (invalidTypes) {\n      const fixedType = publish(typeAst);\n\n      _.forEach(invalidTypes, (invalidType) => {\n        const fix = (fixer) => {\n          return fixer.replaceText(jsdocNode, sourceCode.getText(jsdocNode).replace('{' + jsdocTag.type + '}', '{' + fixedType + '}'));\n        };\n\n        const name = jsdocTag.name ? ' \"' + jsdocTag.name + '\"' : '';\n\n        report('Invalid JSDoc @' + jsdocTag.tag + name + ' type \"' + invalidType + '\".', fix, jsdocTag);\n      });\n    }\n  });\n});\n"],"file":"checkTypes.js"}