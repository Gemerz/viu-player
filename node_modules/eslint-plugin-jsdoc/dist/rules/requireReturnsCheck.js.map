{"version":3,"sources":["../../src/rules/requireReturnsCheck.js"],"names":["jsdoc","report","functionNode","utils","type","expression","async","targetTagName","getPreferredTagName","tags","jsdocTags","filter","item","tag","length","returnsTagType","trim","isAbstract","some","sourcecode","getFunctionSourceCode","indexOf"],"mappings":";;;;;;;AAAA;;;;eAEe,2BAAa,gBAKtB;AAAA,MAJJA,KAII,QAJJA,KAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,MAFJC,YAEI,QAFJA,YAEI;AAAA,MADJC,KACI,QADJA,KACI;;AACJ;AACA,MAAID,YAAY,CAACE,IAAb,KAAsB,yBAAtB,IAAmDF,YAAY,CAACG,UAApE,EAAgF;AAC9E;AACD,GAJG,CAMJ;;;AACA,MAAIH,YAAY,CAACI,KAAjB,EAAwB;AACtB;AACD;;AAED,MAAMC,aAAa,GAAGJ,KAAK,CAACK,mBAAN,CAA0B,SAA1B,CAAtB,CAXI,CAaJ;;AACA,MAAI,OAAOR,KAAK,CAACS,IAAb,KAAsB,WAA1B,EAAuC;AACrC;AACD;;AAED,MAAMC,SAAS,GAAGV,KAAK,CAACS,IAAN,CAAWE,MAAX,CAAkB,UAACC,IAAD,EAAU;AAC5C,WAAOA,IAAI,CAACC,GAAL,KAAaN,aAApB;AACD,GAFiB,CAAlB;;AAIA,MAAIG,SAAS,CAACI,MAAV,KAAqB,CAAzB,EAA4B;AAC1B;AACD;;AAED,MAAIJ,SAAS,CAACI,MAAV,GAAmB,CAAvB,EAA0B;AACxBb,IAAAA,MAAM,CAAC,0BAA0BM,aAA1B,GAA0C,eAA3C,CAAN;AAEA;AACD;;AAED,MAAMQ,cAAc,GAAGL,SAAS,CAAC,CAAD,CAAT,CAAaN,IAAb,IAAqBM,SAAS,CAAC,CAAD,CAAT,CAAaN,IAAb,CAAkBY,IAAlB,EAA5C;;AAEA,MAAID,cAAc,KAAK,MAAnB,IAA6BA,cAAc,KAAK,WAApD,EAAiE;AAC/D;AACD,GApCG,CAsCJ;AACA;AACA;AACA;;;AACA,MAAME,UAAU,GAAGjB,KAAK,CAACS,IAAN,CAAWS,IAAX,CAAgB,UAACN,IAAD,EAAU;AAC3C,WAAOA,IAAI,CAACC,GAAL,KAAaV,KAAK,CAACK,mBAAN,CAA0B,UAA1B,CAApB;AACD,GAFkB,CAAnB;;AAIA,MAAIS,UAAJ,EAAgB;AACd;AACD;;AAED,MAAME,UAAU,GAAGhB,KAAK,CAACiB,qBAAN,EAAnB;;AAEA,MAAID,UAAU,CAACE,OAAX,CAAmB,QAAnB,MAAiC,CAAC,CAAtC,EAAyC;AACvCpB,IAAAA,MAAM,CAAC,oBAAoBM,aAApB,GAAoC,+DAArC,CAAN;AACD;AACF,CA5Dc,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  functionNode,\n  utils\n}) => {\n  // Implicit return like `() => foo` is ok\n  if (functionNode.type === 'ArrowFunctionExpression' && functionNode.expression) {\n    return;\n  }\n\n  // Async function always returns a promise\n  if (functionNode.async) {\n    return;\n  }\n\n  const targetTagName = utils.getPreferredTagName('returns');\n\n  // We can skip in case there are no tags defined...\n  if (typeof jsdoc.tags === 'undefined') {\n    return;\n  }\n\n  const jsdocTags = jsdoc.tags.filter((item) => {\n    return item.tag === targetTagName;\n  });\n\n  if (jsdocTags.length === 0) {\n    return;\n  }\n\n  if (jsdocTags.length > 1) {\n    report('Found more than one @' + targetTagName + ' declaration.');\n\n    return;\n  }\n\n  const returnsTagType = jsdocTags[0].type && jsdocTags[0].type.trim();\n\n  if (returnsTagType === 'void' || returnsTagType === 'undefined') {\n    return;\n  }\n\n  // An abstract function is by definition incomplete\n  // so it is perfectly fine if the return is missing\n  // a subclass may inherits the doc an implements the\n  // missing return.\n  const isAbstract = jsdoc.tags.some((item) => {\n    return item.tag === utils.getPreferredTagName('abstract');\n  });\n\n  if (isAbstract) {\n    return;\n  }\n\n  const sourcecode = utils.getFunctionSourceCode();\n\n  if (sourcecode.indexOf('return') === -1) {\n    report('Present JSDoc @' + targetTagName + ' declaration but not available return expression in function.');\n  }\n});\n"],"file":"requireReturnsCheck.js"}