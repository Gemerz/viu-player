"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _jsdoctypeparser = require("jsdoctypeparser");

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var targetTags = ['class', 'constant', 'enum', 'member', 'module', 'namespace', 'param', 'property', 'returns', 'throws', 'type', 'typedef'];
var targetTagAliases = ['constructor', 'const', 'var', 'arg', 'argument', 'prop', 'return', 'exception'];
targetTags = targetTags.concat(targetTagAliases);
var strictNativeTypes = ['undefined', 'null', 'boolean', 'number', 'string', 'Array', 'Object', 'RegExp', 'Date', 'Function'];

var _default = (0, _iterateJsdoc.default)(function (_ref) {
  var jsdoc = _ref.jsdoc,
      jsdocNode = _ref.jsdocNode,
      sourceCode = _ref.sourceCode,
      report = _ref.report;

  var jsdocTags = _lodash.default.filter(jsdoc.tags, function (tag) {
    return _lodash.default.includes(targetTags, tag.tag);
  });

  _lodash.default.forEach(jsdocTags, function (jsdocTag) {
    var invalidTypes = [];
    var typeAst;

    try {
      typeAst = (0, _jsdoctypeparser.parse)(jsdocTag.type);
    } catch (error) {
      return;
    }

    (0, _jsdoctypeparser.traverse)(typeAst, function (node) {
      if (node.type === 'NAME') {
        for (var _i = 0, _strictNativeTypes = strictNativeTypes; _i < _strictNativeTypes.length; _i++) {
          var strictNativeType = _strictNativeTypes[_i];

          if (strictNativeType.toLowerCase() === node.name.toLowerCase() && strictNativeType !== node.name) {
            invalidTypes.push(node.name);
            node.name = strictNativeType;
          }
        }
      }
    });

    if (invalidTypes) {
      var fixedType = (0, _jsdoctypeparser.publish)(typeAst);

      _lodash.default.forEach(invalidTypes, function (invalidType) {
        var fix = function fix(fixer) {
          return fixer.replaceText(jsdocNode, sourceCode.getText(jsdocNode).replace('{' + jsdocTag.type + '}', '{' + fixedType + '}'));
        };

        var name = jsdocTag.name ? ' "' + jsdocTag.name + '"' : '';
        report('Invalid JSDoc @' + jsdocTag.tag + name + ' type "' + invalidType + '".', fix, jsdocTag);
      });
    }
  });
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=checkTypes.js.map