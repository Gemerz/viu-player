"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _jsdoctypeparser = require("jsdoctypeparser");

var _iterateJsdoc = _interopRequireWildcard(require("../iterateJsdoc"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var extraTypes = ['null', 'undefined', 'string', 'number', 'boolean', 'any', '*', 'Array', 'Object', 'RegExp', 'Date', 'Function'];
var tagsWithNames = ['callback', 'class', 'constructor', 'constant', 'const', 'event', 'external', 'host', 'function', 'func', 'method', 'interface', 'member', 'var', 'mixin', 'name', 'namespace', 'type', 'typedef'];

var _default = (0, _iterateJsdoc.default)(function (_ref) {
  var context = _ref.context,
      jsdoc = _ref.jsdoc,
      report = _ref.report,
      sourceCode = _ref.sourceCode;
  var scopeManager = sourceCode.scopeManager;
  var globalScope = scopeManager.globalScope;
  var typedefDeclarations = (0, _lodash.default)(context.getAllComments()).filter(function (comment) {
    return _lodash.default.startsWith(comment.value, '*');
  }).map(_iterateJsdoc.parseComment).flatMap(function (doc) {
    return (doc.tags || []).filter(function (tag) {
      return _lodash.default.includes(tagsWithNames, tag.tag);
    });
  }).map(function (tag) {
    return tag.name;
  }).value();
  var definedTypes = globalScope.variables.map(function (variable) {
    return variable.name;
  }) // If the file is a module, concat the variables from the module scope.
  .concat(scopeManager.isModule() ? globalScope.childScopes[0].variables.map(function (variable) {
    return variable.name;
  }) : []).concat(extraTypes).concat(typedefDeclarations);

  _lodash.default.forEach(jsdoc.tags, function (tag) {
    var parsedType;

    try {
      parsedType = (0, _jsdoctypeparser.parse)(tag.type);
    } catch (error) {
      // On syntax error, will be handled by valid-types.
      return;
    }

    (0, _jsdoctypeparser.traverse)(parsedType, function (node) {
      if (node.type === 'NAME') {
        if (!_lodash.default.includes(definedTypes, node.name)) {
          report('The type \'' + node.name + '\' is undefined.', null, tag);
        } else if (!_lodash.default.includes(extraTypes, node.name)) {
          context.markVariableAsUsed(node.name);
        }
      }
    });
  });
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=noUndefinedTypes.js.map