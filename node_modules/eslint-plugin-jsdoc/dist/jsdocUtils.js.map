{"version":3,"sources":["../src/jsdocUtils.js"],"names":["getFunctionParameterNames","functionNode","_","map","params","param","has","name","left","type","get","argument","Error","getJsdocParameterNamesDeep","jsdoc","targetTagName","jsdocParameterNames","filter","tags","tag","getJsdocParameterNames","indexOf","getPreferredTagName","tagPreference","includes","values","preferredTagName","findKey","tagNames","aliases","isValidTag","additionalTagNames","validTagNames","keys","concat","flatten","additionalTags","customTags","allTags","hasTag","targetTagLower","toLowerCase","some","doc","hasATag","targetTagNames","namepathAsNameTags","isNamepathType","tagName","checkSeesForNamepaths"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport tagNames from './tagNames';\n\nconst getFunctionParameterNames = (functionNode : Object) : Array<string> => {\n  return _.map(functionNode.params, (param) => {\n    if (_.has(param, 'name')) {\n      return param.name;\n    }\n\n    if (_.has(param, 'left.name')) {\n      return param.left.name;\n    }\n\n    if (param.type === 'ObjectPattern' || _.get(param, 'left.type') === 'ObjectPattern') {\n      return '<ObjectPattern>';\n    }\n\n    if (param.type === 'ArrayPattern' || _.get(param, 'left.type') === 'ArrayPattern') {\n      return '<ArrayPattern>';\n    }\n\n    if (param.type === 'RestElement') {\n      return param.argument.name;\n    }\n\n    throw new Error('Unsupported function signature format.');\n  });\n};\n\n/**\n * Gets all parameter names, including those that refer to a path, e.g. \"@param foo; @param foo.bar\".\n */\nconst getJsdocParameterNamesDeep = (jsdoc : Object, targetTagName : string) : Array<string> => {\n  let jsdocParameterNames;\n\n  jsdocParameterNames = _.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  jsdocParameterNames = _.map(jsdocParameterNames, 'name');\n\n  return jsdocParameterNames;\n};\n\nconst getJsdocParameterNames = (jsdoc : Object, targetTagName : string) : Array<string> => {\n  let jsdocParameterNames;\n\n  jsdocParameterNames = getJsdocParameterNamesDeep(jsdoc, targetTagName);\n\n  jsdocParameterNames = _.filter(jsdocParameterNames, (name) => {\n    return name.indexOf('.') === -1;\n  });\n\n  return jsdocParameterNames;\n};\n\nconst getPreferredTagName = (name : string, tagPreference : Object = {}) : string => {\n  if (_.includes(_.values(tagPreference), name)) {\n    return name;\n  }\n\n  const preferredTagName = _.findKey(tagNames, (aliases) => {\n    return _.includes(aliases, name);\n  });\n\n  if (preferredTagName) {\n    return preferredTagName;\n  }\n\n  return _.has(tagPreference, name) ? tagPreference[name] : name;\n};\n\nconst isValidTag = (name : string, additionalTagNames : Object) : boolean => {\n  const validTagNames = _.keys(tagNames).concat(_.flatten(_.values(tagNames)));\n  const additionalTags = additionalTagNames.customTags || [];\n  const allTags = validTagNames.concat(additionalTags);\n\n  return _.includes(allTags, name);\n};\n\nconst hasTag = (jsdoc : Object, targetTagName : string) : boolean => {\n  const targetTagLower = targetTagName.toLowerCase();\n\n  return _.some(jsdoc.tags, (doc : Object) => {\n    return doc.tag.toLowerCase() === targetTagLower;\n  });\n};\n\nconst hasATag = (jsdoc : Object, targetTagNames : Array) : boolean => {\n  return targetTagNames.some((targetTagName) => {\n    return hasTag(jsdoc, targetTagName);\n  });\n};\n\nconst namepathAsNameTags = [\n  'alias',\n  'augments',\n  'callback',\n  'extends',\n  'lends',\n  'memberof',\n  'memberof!',\n  'mixes',\n  'name',\n  'this',\n\n  'emits',\n  'event',\n  'fires',\n  'listens'\n];\n\nconst isNamepathType = (tagName, checkSeesForNamepaths) => {\n  return _.includes(namepathAsNameTags, tagName) ||\n    tagName === 'see' && checkSeesForNamepaths;\n};\n\nexport default {\n  getFunctionParameterNames,\n  getJsdocParameterNames,\n  getJsdocParameterNamesDeep,\n  getPreferredTagName,\n  hasATag,\n  hasTag,\n  isNamepathType,\n  isValidTag\n};\n"],"file":"jsdocUtils.js"}